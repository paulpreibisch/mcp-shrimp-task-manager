import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import HistoryView from './HistoryView';

// Mock react-i18next with more realistic translations
vi.mock('react-i18next', () => ({
  useTranslation: () => ({
    t: (key) => {
      const translations = {
        dateTime: 'dateTime',
        initialRequest: 'initialRequest', 
        statusSummary: 'statusSummary',
        actions: 'actions',
        completed: 'completed',
        inProgress: 'inProgress',
        pending: 'pending',
        viewTasks: 'viewTasks',
        delete: 'delete',
        import: 'import',
        loading: 'loading',
        noHistoryFound: 'noHistoryFound',
        projectHistory: 'projectHistory',
        backToTasks: 'backToTasks',
        showing: 'showing',
        to: 'to',
        of: 'of',
        page: 'page',
        historyEntries: 'historyEntries'
      };
      return translations[key] || key;
    },
    i18n: {
      language: 'en',
      changeLanguage: vi.fn()
    }
  })
}));

describe('HistoryView Component', () => {
  const mockData = [
    {
      id: 'abc12345-6789-def0-1234-567890abcdef',
      timestamp: '2024-01-15T10:30:00Z',
      initialRequest: 'This is a very long initial request that should be truncated after 100 characters to ensure proper display in the table without breaking the layout',
      taskCount: 5,
      stats: {
        completed: 2,
        inProgress: 1,
        pending: 2
      }
    },
    {
      id: 'def67890-abcd-ef12-3456-7890abcdef12',
      timestamp: '2024-01-14T15:45:00Z',
      initialRequest: 'Short request',
      taskCount: 3,
      stats: {
        completed: 3,
        inProgress: 0,
        pending: 0
      }
    },
    {
      id: null,
      timestamp: '2024-01-13T09:00:00Z',
      initialRequest: null,
      taskCount: 0,
      stats: {
        completed: 0,
        inProgress: 0,
        pending: 0
      }
    }
  ];

  const defaultProps = {
    data: mockData,
    loading: false,
    error: '',
    onViewTasks: vi.fn(),
    onBack: vi.fn(),
    onDeleteHistory: vi.fn(),
    onImportHistory: vi.fn(),
    profileId: 'test-profile'
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Table Structure', () => {
    it('should render table with all expected columns matching ArchiveView format', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check for column headers matching updated structure
      const headers = ['ID', 'dateTime', 'initialRequest', 'statusSummary', 'actions'];
      headers.forEach(header => {
        expect(screen.getByText(header)).toBeInTheDocument();
      });
    });

    it('should display ID column with first 8 characters when ID exists', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Should show truncated IDs
      expect(screen.getByText('abc12345')).toBeInTheDocument();
      expect(screen.getByText('def67890')).toBeInTheDocument();
      // For entries without ID, should show dash (there might be multiple)
      const dashes = screen.getAllByText('-');
      expect(dashes.length).toBeGreaterThan(0);
    });

    it('should format date correctly in local timezone', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check that dates are displayed (exact format depends on locale)
      const dateElements = screen.getAllByText(/2024/);
      expect(dateElements.length).toBeGreaterThan(0);
    });

    it('should truncate initial request at 100 characters with tooltip', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check for truncated text (current implementation shows full text)
      const longRequestElement = screen.getByTitle(mockData[0].initialRequest);
      expect(longRequestElement).toBeInTheDocument();
      
      // After reformatting to match ArchiveView:
      // - Text should be truncated at 100 chars
      // - Full text in title attribute for tooltip
      // - Ellipsis added for long text
    });

    it('should display task statistics with inline colored badges', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check that statistics are displayed with counts
      // The component shows "2 completed", "1 inProgress", etc.
      expect(screen.getByText(/2.*completed/)).toBeInTheDocument();
      expect(screen.getByText(/1.*inProgress/)).toBeInTheDocument();
      expect(screen.getByText(/2.*pending/)).toBeInTheDocument();
      
      // Check for the second row's stats
      expect(screen.getByText(/3.*completed/)).toBeInTheDocument();
      
      // The component uses inline styles with colors: #4ade80 (completed), #facc15 (in progress), #94a3b8 (pending)
    });
  });

  describe('Action Buttons', () => {
    it('should render View, Delete, and Import buttons in actions column', () => {
      render(<HistoryView {...defaultProps} />);
      
      const viewButtons = screen.getAllByTitle('viewTasks');
      expect(viewButtons.length).toBe(3); // All entries have view buttons
      
      const deleteButtons = screen.getAllByTitle('delete');
      const importButtons = screen.getAllByTitle('import');
      expect(deleteButtons.length).toBe(mockData.length);
      expect(importButtons.length).toBe(mockData.length);
    });

    it('should call onViewTasks when View button is clicked', () => {
      render(<HistoryView {...defaultProps} />);
      
      const viewButton = screen.getAllByTitle('viewTasks')[0];
      fireEvent.click(viewButton);
      
      expect(defaultProps.onViewTasks).toHaveBeenCalledWith(mockData[0]);
    });

    it('should call onDeleteHistory when Delete button is clicked', () => {
      const propsWithDelete = {
        ...defaultProps,
        onDeleteHistory: vi.fn()
      };
      
      render(<HistoryView {...propsWithDelete} />);
      
      const deleteButton = screen.getAllByTitle('delete')[0];
      fireEvent.click(deleteButton);
      
      expect(propsWithDelete.onDeleteHistory).toHaveBeenCalledWith(mockData[0]);
    });

    it('should call onImportHistory when Import button is clicked', () => {
      const propsWithImport = {
        ...defaultProps,
        onImportHistory: vi.fn()
      };
      
      render(<HistoryView {...propsWithImport} />);
      
      const importButton = screen.getAllByTitle('import')[0];
      fireEvent.click(importButton);
      
      expect(propsWithImport.onImportHistory).toHaveBeenCalledWith(mockData[0]);
    });

    it('should handle rapid consecutive button clicks', () => {
      const propsWithHandlers = {
        ...defaultProps,
        onDeleteHistory: vi.fn(),
        onImportHistory: vi.fn()
      };
      
      render(<HistoryView {...propsWithHandlers} />);
      
      const deleteButton = screen.getAllByTitle('delete')[0];
      const importButton = screen.getAllByTitle('import')[0];
      
      // Rapid clicks on delete
      fireEvent.click(deleteButton);
      fireEvent.click(deleteButton);
      fireEvent.click(deleteButton);
      
      // Should be called three times
      expect(propsWithHandlers.onDeleteHistory).toHaveBeenCalledTimes(3);
      
      // Rapid clicks on import
      fireEvent.click(importButton);
      fireEvent.click(importButton);
      
      expect(propsWithHandlers.onImportHistory).toHaveBeenCalledTimes(2);
    });

    it('should pass correct data structure to handlers', () => {
      const propsWithHandlers = {
        ...defaultProps,
        onDeleteHistory: vi.fn(),
        onImportHistory: vi.fn()
      };
      
      render(<HistoryView {...propsWithHandlers} />);
      
      const deleteButton = screen.getAllByTitle('delete')[0];
      fireEvent.click(deleteButton);
      
      // Check that the full entry object is passed
      expect(propsWithHandlers.onDeleteHistory).toHaveBeenCalledWith(
        expect.objectContaining({
          id: mockData[0].id,
          timestamp: mockData[0].timestamp,
          initialRequest: mockData[0].initialRequest,
          taskCount: mockData[0].taskCount,
          stats: mockData[0].stats
        })
      );
      
      const importButton = screen.getAllByTitle('import')[1];
      fireEvent.click(importButton);
      
      expect(propsWithHandlers.onImportHistory).toHaveBeenCalledWith(
        expect.objectContaining({
          id: mockData[1].id,
          timestamp: mockData[1].timestamp,
          initialRequest: mockData[1].initialRequest,
          taskCount: mockData[1].taskCount,
          stats: mockData[1].stats
        })
      );
    });

    it('should not render delete/import buttons when handlers are not provided', () => {
      const propsWithoutHandlers = {
        ...defaultProps,
        onDeleteHistory: undefined,
        onImportHistory: undefined
      };
      
      render(<HistoryView {...propsWithoutHandlers} />);
      
      // View buttons should still exist
      const viewButtons = screen.getAllByTitle('viewTasks');
      expect(viewButtons.length).toBe(3);
      
      // Delete and Import buttons should not exist
      const deleteButtons = screen.queryAllByTitle('delete');
      const importButtons = screen.queryAllByTitle('import');
      expect(deleteButtons.length).toBe(0);
      expect(importButtons.length).toBe(0);
    });

    it('should stop event propagation when buttons are clicked', () => {
      const { container } = render(<HistoryView {...defaultProps} />);
      
      // Create a spy for propagation
      const propagationSpy = vi.fn();
      
      // Get the delete button
      const deleteButton = screen.getAllByTitle('delete')[0];
      
      // Add event listener to parent to check propagation
      const actionsCell = deleteButton.parentElement;
      actionsCell.addEventListener('click', propagationSpy, true);
      
      // Create and dispatch click event with stopPropagation tracked
      const clickEvent = new MouseEvent('click', { bubbles: true, cancelable: true });
      const stopPropagationSpy = vi.spyOn(clickEvent, 'stopPropagation');
      
      deleteButton.dispatchEvent(clickEvent);
      
      // Verify stopPropagation was called
      expect(stopPropagationSpy).toHaveBeenCalled();
    });
  });

  describe('Styling', () => {
    it('should apply purple color scheme while using archive table structure', () => {
      const { container } = render(<HistoryView {...defaultProps} />);
      
      // Check for purple gradient background (from CSS)
      const historyView = container.querySelector('.history-view');
      expect(historyView).toBeInTheDocument();
      
      // After reformatting:
      // - Should maintain purple gradient background
      // - Headers should use #8b5cf6 (purple) color
      // - Should use inline styles like ArchiveView
      // - Keep history's color identity
    });

    it('should use inline styles for table elements like ArchiveView', () => {
      const { container } = render(<HistoryView {...defaultProps} />);
      
      const table = container.querySelector('table');
      expect(table).toBeInTheDocument();
      
      // After reformatting to match ArchiveView:
      // - Table should have inline styles
      // - Headers should have inline styles
      // - Should follow ArchiveView's styling pattern
      // Currently uses CSS classes, will change to inline
    });

    it('should maintain responsive design', () => {
      const { container } = render(<HistoryView {...defaultProps} />);
      
      const table = container.querySelector('table');
      expect(table).toBeInTheDocument();
      
      // Table should be responsive
      // After reformatting: width: '100%' in inline styles
    });
  });

  describe('Pagination', () => {
    it('should render pagination controls', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check for pagination buttons
      expect(screen.getByText('<<')).toBeInTheDocument();
      expect(screen.getByText('<')).toBeInTheDocument();
      expect(screen.getByText('>')).toBeInTheDocument();
      expect(screen.getByText('>>')).toBeInTheDocument();
      
      // Check for page info
      expect(screen.getByText(/page.*1.*of/i)).toBeInTheDocument();
    });

    it('should display correct pagination info', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Check showing info (3 entries in mock data)
      expect(screen.getByText(/showing.*1.*to.*3.*of.*3/i)).toBeInTheDocument();
    });
  });

  describe('Loading and Error States', () => {
    it('should display loading state', () => {
      render(<HistoryView {...defaultProps} loading={true} />);
      
      expect(screen.getByText(/loading.*⏳/i)).toBeInTheDocument();
    });

    it('should display error state', () => {
      const errorMessage = 'Failed to load history';
      render(<HistoryView {...defaultProps} error={errorMessage} />);
      
      expect(screen.getByText(errorMessage)).toBeInTheDocument();
    });

    it('should display empty state when no data', () => {
      render(<HistoryView {...defaultProps} data={[]} />);
      
      expect(screen.getByText('noHistoryFound')).toBeInTheDocument();
    });
  });

  describe('Interaction with Back Button', () => {
    it('should render back button when onBack is provided', () => {
      render(<HistoryView {...defaultProps} />);
      
      const backButton = screen.getByTitle('backToTasks');
      expect(backButton).toBeInTheDocument();
    });

    it('should call onBack when back button is clicked', () => {
      render(<HistoryView {...defaultProps} />);
      
      const backButton = screen.getByTitle('backToTasks');
      fireEvent.click(backButton);
      
      expect(defaultProps.onBack).toHaveBeenCalled();
    });

    it('should not render back button when onBack is not provided', () => {
      render(<HistoryView {...defaultProps} onBack={undefined} />);
      
      const backButtons = screen.queryAllByTitle('backToTasks');
      expect(backButtons.length).toBe(0);
    });
  });

  describe('Table Sorting', () => {
    it('should allow sorting by clicking column headers', () => {
      const { container } = render(<HistoryView {...defaultProps} />);
      
      const dateHeader = screen.getByText('dateTime');
      const headerTh = dateHeader.closest('th');
      expect(headerTh).toHaveClass('sortable');
      
      // The table starts with default sorting on timestamp column
      // Check that there's already a sort indicator
      const sortIndicators = container.querySelectorAll('th span');
      expect(sortIndicators.length).toBeGreaterThan(0);
    });

    it('should toggle sort direction when clicking sorted column', () => {
      render(<HistoryView {...defaultProps} />);
      
      // The table starts sorted by timestamp desc
      // Click another sortable column
      const statusHeader = screen.getByText('statusSummary');
      fireEvent.click(statusHeader);
      
      // Verify the header is clickable
      expect(statusHeader.closest('th')).toHaveClass('sortable');
    });
  });

  describe('Multiple Button Interactions', () => {
    it('should handle multiple delete operations sequentially', async () => {
      const onDeleteHistory = vi.fn();
      const props = { ...defaultProps, onDeleteHistory };
      
      render(<HistoryView {...props} />);
      
      // Delete first item
      const deleteButtons = screen.getAllByTitle('delete');
      fireEvent.click(deleteButtons[0]);
      expect(onDeleteHistory).toHaveBeenCalledWith(mockData[0]);
      
      // Delete second item
      fireEvent.click(deleteButtons[1]);
      expect(onDeleteHistory).toHaveBeenCalledWith(mockData[1]);
      
      expect(onDeleteHistory).toHaveBeenCalledTimes(2);
    });

    it('should handle import for entries with different data states', () => {
      const onImportHistory = vi.fn();
      const dataWithVariousStates = [
        { ...mockData[0], stats: { completed: 10, inProgress: 0, pending: 0 } }, // All completed
        { ...mockData[1], stats: { completed: 0, inProgress: 5, pending: 5 } }, // Mixed
        { ...mockData[2], stats: { completed: 0, inProgress: 0, pending: 10 } } // All pending
      ];
      
      const props = { 
        ...defaultProps, 
        data: dataWithVariousStates,
        onImportHistory 
      };
      
      render(<HistoryView {...props} />);
      
      const importButtons = screen.getAllByTitle('import');
      
      // Import entry with all completed tasks
      fireEvent.click(importButtons[0]);
      expect(onImportHistory).toHaveBeenCalledWith(dataWithVariousStates[0]);
      
      // Import entry with mixed status tasks
      fireEvent.click(importButtons[1]);
      expect(onImportHistory).toHaveBeenCalledWith(dataWithVariousStates[1]);
    });
  });

  describe('Edge Cases and Error Handling', () => {
    it('should handle handler errors gracefully', async () => {
      const onDeleteHistory = vi.fn().mockRejectedValue(new Error('Delete failed'));
      const onImportHistory = vi.fn().mockRejectedValue(new Error('Import failed'));
      
      const props = {
        ...defaultProps,
        onDeleteHistory,
        onImportHistory
      };
      
      render(<HistoryView {...props} />);
      
      const deleteButton = screen.getAllByTitle('delete')[0];
      const importButton = screen.getAllByTitle('import')[0];
      
      // Click delete - should not crash even if handler rejects
      fireEvent.click(deleteButton);
      await waitFor(() => {
        expect(onDeleteHistory).toHaveBeenCalled();
      });
      
      // Click import - should not crash even if handler rejects
      fireEvent.click(importButton);
      await waitFor(() => {
        expect(onImportHistory).toHaveBeenCalled();
      });
      
      // Component should still be in the document
      expect(screen.getByRole('table')).toBeInTheDocument();
    });

    it('should handle entries with missing data gracefully', () => {
      const dataWithMissing = [
        {
          id: null,
          timestamp: null,
          initialRequest: null,
          taskCount: 0,
          stats: {
            completed: 0,
            inProgress: 0,
            pending: 0
          }
        }
      ];
      
      render(<HistoryView {...defaultProps} data={dataWithMissing} />);
      
      // Should render without crashing
      expect(screen.getByRole('table')).toBeInTheDocument();
    });

    it('should handle very long initial requests', () => {
      const longRequest = 'A'.repeat(500);
      const dataWithLongRequest = [
        {
          ...mockData[0],
          initialRequest: longRequest
        }
      ];
      
      render(<HistoryView {...defaultProps} data={dataWithLongRequest} />);
      
      // Should truncate and add to title
      const requestElement = screen.getByTitle(longRequest);
      expect(requestElement).toBeInTheDocument();
    });

    it('should disable action buttons appropriately', () => {
      const dataWithNoTasks = [
        {
          ...mockData[0],
          taskCount: 0
        },
        {
          ...mockData[1],
          taskCount: 5
        }
      ];
      
      render(<HistoryView {...defaultProps} data={dataWithNoTasks} />);
      
      // View buttons
      const viewButtons = screen.getAllByTitle('viewTasks');
      // First button should be disabled (no tasks)
      expect(viewButtons[0]).toBeDisabled();
      // Second button should be enabled (has tasks)
      expect(viewButtons[1]).not.toBeDisabled();
    });
  });

  describe('Accessibility', () => {
    it('should have proper ARIA roles and labels', () => {
      render(<HistoryView {...defaultProps} />);
      
      // Table should have role
      expect(screen.getByRole('table')).toBeInTheDocument();
      
      // Headers should be properly marked
      const headers = screen.getAllByRole('columnheader');
      expect(headers.length).toBeGreaterThan(0);
    });

    it('should support keyboard navigation', () => {
      render(<HistoryView {...defaultProps} />);
      
      const viewButton = screen.getAllByTitle('viewTasks')[0];
      
      // Focus and trigger with click (keyDown doesn't trigger click by default)
      viewButton.focus();
      fireEvent.click(viewButton);
      
      // Should trigger the action
      expect(defaultProps.onViewTasks).toHaveBeenCalled();
    });
  });

  describe('Performance', () => {
    it('should handle large datasets efficiently', () => {
      const largeData = Array.from({ length: 100 }, (_, i) => ({
        id: `id-${i}`,
        timestamp: new Date(2024, 0, i + 1).toISOString(),
        initialRequest: `Request ${i}`,
        taskCount: i,
        stats: {
          completed: i,
          inProgress: 0,
          pending: 0
        }
      }));
      
      const { container } = render(<HistoryView {...defaultProps} data={largeData} />);
      
      // Should paginate data
      const rows = container.querySelectorAll('tbody tr');
      expect(rows.length).toBeLessThanOrEqual(15); // Default page size
    });
  });

  describe('Button Hover Effects', () => {
    it('should apply hover styles to action buttons', () => {
      render(<HistoryView {...defaultProps} />);
      
      // After implementation, buttons should have hover effects
      // matching ArchiveView's style:
      // - Delete: border #ef4444, bg rgba(239, 68, 68, 0.1)
      // - Import: border #8b5cf6, bg rgba(139, 92, 246, 0.1)
      // - View: border #4fbdba, bg rgba(79, 189, 186, 0.1)
      
      const viewButton = screen.getAllByTitle('viewTasks')[0];
      expect(viewButton).toBeInTheDocument();
    });
  });
});