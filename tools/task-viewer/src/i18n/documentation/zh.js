export const zhDocumentation = {
  releaseNotes: {
    header: '📋 发布说明',
    versions: '版本',
    loading: '正在加载发布说明...',
    notFound: '未找到发布说明。',
    error: '加载发布说明时出错。',
    copy: '复制',
    copied: '已复制！'
  },
  help: {
    header: 'ℹ️ 帮助与文档',
    loading: '正在加载文档...',
    notFound: '未找到 README。',
    error: '加载 README 时出错。',
    copy: '复制',
    copied: '已复制！'
  },
  releases: {
    'v2.1.0': {
      title: '🚀 任务查看器 v2.1.0 发布说明',
      date: '发布日期：2025年7月29日',
      content: `# 🚀 任务查看器 v2.1.0 发布说明

*发布日期：2025年7月29日*

## 🎉 新功能

### 🔗 可点击的文件路径，支持项目根目录
**一键复制完整文件路径！**

- **点击复制文件路径**：现在，当您点击任务并进入任务详情页面时，如果列出了任务修改或创建的相关文件，文件名将带有指向文件系统中实际文件的超链接（前提是您在创建/编辑配置文件选项卡时配置了项目文件夹）

### 📋 增强的 UUID 管理
**通过直观的交互简化 UUID 复制**

在与 Claude 交互时，有时很容易引用虾任务很有用，例如：
"Claude，请完成这个虾任务：da987923-2afe-4ac3-985e-ac029cc831e7"。因此，我们在任务 # 徽章和任务名称列中列出的 UUID 上添加了点击复制功能。

- **点击复制任务徽章**：点击任何任务编号徽章即可立即复制其 UUID
- **任务名称列下显示的串联 UUID**：点击 UUID 进行复制

### 🔄 便于并行化的任务依赖项列

我们添加了一个依赖项列，列出了任何依赖任务的链接 UUID。现在您可以轻松导航到依赖任务。

### 🤖 AI 指令操作
**一键 AI 任务指令**

我们添加了一个操作列，其中有一个方便的机器人表情符号。如果您点击表情符号，它会将 AI 指令复制到剪贴板，然后您可以将其粘贴到您的代理聊天中。该指令已编码为复制以下内容："使用任务管理器完成此虾任务：< UUID >"

此指令对于并行化很有用。例如，如果以下 3 个任务没有依赖关系，您可以打开多个终端窗口，并粘贴 AI 指令。例如：

终端 1：使用任务管理器完成此虾任务：da987923-2afe-4ac3-985e-ac029cc831e7
终端 2：使用任务管理器完成此虾任务：4afe3f1c-bf7f-4642-8485-668c33a1e0fc
终端 3：使用任务管理器完成此虾任务：21bd2cb9-4109-4897-9904-885ee2b0792e

### ✏️ 配置文件编辑按钮

**项目根目录配置**：现在您可以为每个配置文件设置项目根目录，这将允许您在查看任务详细信息页面时在"相关文件"时启用完整文件路径复制。

**重命名配置文件的能力**：现在您可以重命名配置文件选项卡，而无需删除和重新创建。

## 🔄 更改

### UI/UX 改进
- **简化的复制操作**：将 UUID 复制整合到仅任务徽章点击
- **依赖项优于备注**：用更有用的依赖项列替换备注列
- **应用内发布说明**：任务查看器的发布说明显示在顶部横幅中
- **基于选项卡的导航**：发布说明集成到具有关闭功能的选项卡系统中

### 架构更新
- **ES 模块兼容性**：为了更好的 ES 模块支持而删除了 busboy 依赖项
- **原生表单解析**：用 Node.js 内置函数替换第三方表单解析
- **版本升级**：更新到 v2.1.0（任务查看器）以反映重要的功能添加

## 🐛 错误修复

### 🚨 关键修复：文件上传创建静态副本
**问题**：通过上传 tasks.json 文件添加配置文件时，系统在 \`/tmp/\` 目录中创建静态副本。这意味着对实际任务文件的任何更改都不会反映在查看器中 - 任务将停留在其原始状态（例如，实际"已完成"时显示"进行中"）。

**解决方案**：完全删除文件上传。现在您必须直接输入文件夹路径，系统会自动附加 \`/tasks.json\`。这确保查看器始终从您的实际实时文件中读取。

**如何使用**：
1. 在终端中导航到您的虾数据文件夹
2. 输入 \`pwd\` 获取完整路径（在 UI 中以黄色突出显示）
3. 将此路径粘贴到"任务文件夹路径"字段中
4. 系统自动使用 \`[您的路径]/tasks.json\`

### 配置文件管理
- **自动选择修复**：新配置文件现在在创建后自动选择和加载
- **导入问题已解决**：修复了 busboy 库的 ES 模块导入问题
- **统一编辑模式**：将重命名和项目根目录编辑合并到单个界面中

### 数据处理
- **项目根目录持久性**：项目根目录路径现在正确保存在配置文件数据中
- **任务加载**：修复了在配置文件之间切换时的竞争条件
- **状态管理**：改进了配置文件选择状态的处理

## 🗑️ 已删除

### 已弃用的功能
- **Busboy 依赖项**：替换为原生 Node.js 表单解析
- **备注列**：替换为更有用的依赖项列
- **单独的复制按钮**：UUID 复制整合到任务徽章点击
- **单独的重命名按钮**：合并到统一的编辑配置文件按钮中

## 📝 技术细节

### 新的 API 端点
- **PUT /api/update-profile/:id**：更新配置文件名称和设置
- **增强的 /api/tasks/:id**：现在在响应中包含 projectRoot
- **GET /releases/*.md**：提供发布说明 markdown 文件

### 前端组件
- **ReleaseNotes 组件**：美观的 markdown 渲染发布说明
- **增强的 TaskTable**：支持依赖项和操作列
- **改进的 TaskDetailView**：可点击的文件路径，支持完整路径复制

### 配置
- **项目根目录存储**：配置文件现在存储可选的 projectRoot 路径
- **设置持久性**：所有配置文件数据保存到 ~/.shrimp-task-viewer-settings.json

## 🎯 总结

版本 2.1.0 将任务查看器转变为更集成的开发工具，具有增强的文件路径管理、改进的 UUID 处理和更好的任务关系可视化。统一的配置文件管理和应用内发布说明提供了更有凝聚力的用户体验，同时保持了干净、直观的界面。`
    },
    'v2.0.0': {
      title: '任务查看器 v2.0.0 发布说明',
      date: '发布日期：2025年7月27日',
      content: `# 任务查看器 v2.0.0 发布说明

*发布日期：2025年7月27日*

## 🚀 初始独立版本

### 主要特性
- **基于 Web 的任务查看器**：具有配置文件管理的现代界面
- **实时更新**：自动刷新任务状态
- **现代 UI**：深色主题，响应式设计
- **配置文件管理**：支持多个项目的任务跟踪

### 技术栈
- React 19 + Vite
- TanStack Table
- Node.js 后端
- 热重载开发

## 🎉 新功能
- 拖放式选项卡重新排序
- 高级搜索和过滤
- 可配置的自动刷新间隔
- 任务统计仪表板

## 🔧 安装
\`\`\`bash
npm install
npm run build
npm start
\`\`\`

查看器将在 http://localhost:9998 上可用`
    }
  },
  readme: {
    title: '🦐 虾任务管理器查看器',
    content: `# 🦐 虾任务管理器查看器

一个基于 React 的现代 Web 界面，用于查看和管理通过 MCP（模型上下文协议）工具创建的[虾任务管理器](https://github.com/cjo4m06/mcp-shrimp-task-manager)任务。这个可视化界面允许您查看详细的任务信息，跟踪多个项目的进度，并轻松复制任务 UUID 以进行 AI 代理交互。

## 为什么使用虾任务查看器？

当使用虾任务管理器作为 MCP 服务器与 Claude 等 AI 代理配合使用时，此查看器提供了对任务生态系统的重要可见性：

- **可视化任务概览**：在干净的选项卡界面中查看所有任务、它们的状态、依赖关系和进度
- **UUID 管理**：点击任何任务徽章即可立即复制其 UUID，用于像 \`"使用任务管理器完成此虾任务：[UUID]"\` 这样的命令
- **并行执行**：打开多个终端并使用 AI 操作列（🤖）复制任务指令以进行并行 AI 代理执行
- **实时更新**：直接文件路径读取确保您始终看到当前的任务状态
- **多项目支持**：使用可拖动的配置文件选项卡管理不同项目的任务

有关将虾任务管理器设置为 MCP 服务器的信息，请参阅[主存储库](https://github.com/cjo4m06/mcp-shrimp-task-manager)。

## 🌟 功能

### 🏷️ 现代选项卡界面
- **可拖动选项卡**：通过拖动选项卡重新排序配置文件
- **专业设计**：浏览器风格的选项卡，与内容无缝连接
- **视觉反馈**：清晰的活动选项卡指示和悬停效果
- **添加新配置文件**：集成的"+ 添加选项卡"按钮，与界面设计相匹配

### 🔍 高级搜索和过滤
- **实时搜索**：按名称、描述、状态或 ID 即时过滤任务
- **可排序列**：点击列标题按任何字段排序
- **TanStack Table**：具有分页和过滤功能的强大表格组件
- **响应式设计**：在桌面、平板电脑和移动设备上完美工作

### 🔄 智能自动刷新
- **可配置间隔**：从 5 秒、10 秒、15 秒、30 秒、1 分钟、2 分钟或 5 分钟中选择
- **智能控件**：带有间隔选择的自动刷新切换
- **视觉指示器**：加载状态和刷新状态
- **手动刷新**：专用刷新按钮，用于按需更新

### 📊 综合任务管理
- **任务统计**：总计、已完成、进行中和待处理任务的实时计数
- **配置文件管理**：通过直观的界面添加/删除/重新排序配置文件
- **持久设置**：配置文件配置在会话之间保存
- **热重载**：具有即时更新的开发模式

### 🎨 专业的 UI/UX
- **深色主题**：针对开发环境优化
- **响应式布局**：适应所有屏幕尺寸
- **可访问性**：完整的键盘导航和屏幕阅读器支持
- **交互元素**：整个过程中的悬停工具提示和视觉反馈

## 🚀 快速开始

### 安装和设置

1. **克隆并导航到任务查看器目录**
   \`\`\`bash
   cd path/to/mcp-shrimp-task-manager/tools/task-viewer
   \`\`\`

2. **安装依赖项**
   \`\`\`bash
   npm install
   \`\`\`

3. **构建 React 应用程序**
   \`\`\`bash
   npm run build
   \`\`\`

4. **启动服务器**
   \`\`\`bash
   npm start
   \`\`\`

   查看器将在 \`http://localhost:9998\` 上可用

### 开发模式

对于具有热重载的开发：

\`\`\`bash
# 启动开发服务器
npm run dev
\`\`\`

应用程序将在 \`http://localhost:3000\` 上可用，并在文件更改时自动重建。

## 🖥️ 使用

### 入门

1. **启动服务器**：
   \`\`\`bash
   npm start
   \`\`\`

2. **打开浏览器**：
   导航到 \`http://127.0.0.1:9998\`

3. **添加您的第一个配置文件**：
   - 点击"**+ 添加选项卡**"按钮
   - 输入描述性配置文件名称（例如，"Alpha 团队任务"）
   - 输入包含 tasks.json 的虾数据文件夹的路径
   - **提示：**在终端中导航到您的文件夹并输入 \`pwd\` 以获取完整路径
   - 点击"**添加配置文件**"

4. **管理您的任务**：
   - 使用选项卡在配置文件之间切换
   - 使用搜索框搜索任务
   - 点击标题对列进行排序
   - 根据需要配置自动刷新

### 选项卡管理

- **切换配置文件**：点击任何选项卡切换到该配置文件
- **重新排序选项卡**：拖动选项卡以按您喜欢的顺序重新排列它们
- **添加新配置文件**：点击"**+ 添加选项卡**"按钮
- **删除配置文件**：点击任何选项卡上的 ×（带确认）

## 📄 许可证

MIT 许可证 - 有关详细信息，请参阅主项目许可证。

## 🤝 贡献

此工具是 MCP 虾任务管理器项目的一部分。欢迎贡献！

---

**快乐的任务管理！🦐✨**

使用 React、Vite 和现代 Web 技术用 ❤️ 构建。`
  }
};