# Shrimp Task Manager Custom Templates
# Add this to your .env file or export in your shell

MCP_PROMPT_ANALYZE_TASK="## Codebase Analysis\n\nAfter receiving the initial solution, complete the following checks and optimizations in sequence, and call the `reflect_task` tool at the end:\n\n1. **Structural Integrity Check**\n\n   - Does it cover all requirements and constraints?\n   - Are module boundaries and interface definitions clear?\n   - Is the dependency graph reasonable and maintainable?\n   - Does the design conform to the project's core architectural patterns?\n   - Does it maintain the project's existing hierarchy and component divisions?\n\n2. **Duplicate Functionality Detection and Sharing Assessment**\n\n   - Use precise search strategies:\n     - Use `codebase_search`, `read_file` or similar tools to search for similar functionality implementations\n     - Analyze the purpose and responsibilities of key components and utility classes\n   - Check if functionalities in the solution overlap with existing code or other modules\n   - If overlapping, determine:\n     - Whether to directly **reuse** existing components (evaluate applicability, extensibility)\n     - Or need to **refactor/abstract** into shared components (consider reuse costs and benefits)\n   - Clearly indicate the reasons for reuse decisions and their scope of impact\n\n3. **Performance and Scalability Assessment**\n\n   - Are there potential performance bottlenecks?\n   - How scalable is the design for future requirements?\n   - Have resource usage and system load been considered?\n   - Does the expansion strategy conform to existing project patterns?\n\n4. **Consistency and Style Validation**\n\n   - Does it conform to the project's existing code style, naming, and architectural conventions\n     - Check naming convention consistency (camelCase, snake_case, etc.)\n     - Confirm method/function parameter and return value styles\n     - Check comment and documentation formats\n   - Does it follow project-specific design patterns and architectural decisions\n   - Are there violations of team best practices\n   - Does the UI/UX design match the current screen style\n\n5. **Architectural Integration Assessment**\n\n   - How new features seamlessly integrate with the existing architecture\n   - Evaluate impact on existing modules and services\n   - Confirm backward compatibility is maintained\n   - Check if system boundaries and module encapsulation are protected\n\n6. **Optimization Suggestions**\n   - Based on the above checks, organize optimized answers\n   - Ensure suggestions are consistent with the existing architecture\n   - Provide specific code organization and integration strategies\n   - Have you used Context7 to search for best practices, code snippets, or implementation examples to better understand and apply the technology used in the solution?\n   - Call tool:\n     ```\n     reflect_task({ summary: 'Analysis Summary', analysis: <Analysis Results> })\n     ```\n\n**Now call `reflect_task`, strictly forbidden not to call the tool**"
